#+SETUPFILE: ../etc/org_mode_SETUPFILE.org
#+Title: Atividade 1 - Loja de Informática
* Introdução
  Vamos fazer um aplicativo em swing pra uma loja de informática
  pessoal.
* requisitos
  Primeiro veja se vc tem o maven instalado na sua máquina
  #+name: mvn -version
  #+BEGIN_SRC sh :results output
  mvn -version
  #+END_SRC

  #+RESULTS: mvn -version
  : Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T05:58:13-02:00)
  : Maven home: /home/wagner/wagnerdocri@gmail.com2/fzlbpms/fzlStudio/integrated/build/apache-maven-3.5.2
  : Java version: 1.8.0_151, vendor: Oracle Corporation
  : Java home: /home/wagner/wagnerdocri@gmail.com2/fzlbpms/fzlStudio/integrated/jdks/jdk1.8.0_151/jre
  : Default locale: pt_BR, platform encoding: UTF-8
  : OS name: "linux", version: "4.14.14-200.fc26.x86_64", arch: "amd64", family: "unix"
  Pela saída acima tá ok. Também dá pra ver que no meu caso o jdk é o
  1.8.0_151 da oracle.
  Agora, se tem o git
    #+name: git --version
  #+BEGIN_SRC sh :results output
  git --version
  #+END_SRC

  #+RESULTS: git --version
  : git version 2.13.6

  Beleza, já dá pra começar. Depois a gente vê a parte do banco de
  dados. Vamos fazer primeiro o basicao.
  
  

* Criando o repositório no github 

  Agora vc precisa criar seu usuário no github e também um repostiório
  para o o seu projeto.
  
  url do github: https://github.com/
  Depois que vc criar o seu usuário e logar vc clica no botão "new
  repository". Procura na página q vc encontra, caso contrário o
  professor ajuda vc.
  [[file:./imgs/github-new-repository-button-img.png]]
  
  Bom aí vai aparecer pra vc o seguinte formulário...
  [[file:./imgs/github-new-repository-form-img.png]]

  No campo "Repository Name" coloque por favor algo como
  PC2LojaInformatica. Aproveite e cheque o  "Initialize this
  repository with a README ". Isso vai gerar um arquivo README.md pra
  vc explicar do que se trata o seu projeto. É esse arquivo que o
  github mostra quando alguém entrar na página do seu projeto.
  
  Depois disso vc tem essa próxima página com instruções sobre o que
  fazer depois de vc ter criado seu repositório.
  [[file:./imgs/github-new-repository-instructions-img.png]]
 
* fazendo o clone do seu repositório pra sua maquina
  O que que é clonar o repositório pra sua máquina? É trazer uma cópia
  do seu repositório que está no github pra sua máquina, mais
  especificamente pra um diretório da sua máquina.
  O seu repositório tem uma url que identifica ele no github. No meu
  caso ficou é   https://github.com/wagnermarques/PC2LojaDeInformatica.git
  [[file:imgs/github-new-repository-instructions-URLREPO-img.png]]
  Agora conhecendo a url do seu repositório, vc vai fazer o seguinte
  pra clonar ele..

  #+NAME: git clone2
  #+BEGIN_SRC sh
  git clone https://github.com/wagnermarques/PC2LojaDeInformatica.git
  #+END_SRC

  #+RESULTS: git clone2

  #+RESULTS: git clone

  após dar o comando procure o diretório do seu projeto no mesmo
  diretório onde vc clonou o repositório

  #+NAME: ls
  #+BEGIN_SRC sh :results output
  ls -l 
  #+END_SRC

  #+RESULTS: ls
  : total 16
  : -rw-rw-r--. 1 wagner wagner 1234 fev 10 23:08 Etec-ProgramacaoDeComputadores.org
  : drwxrwxr-x. 2 wagner wagner 4096 fev 10 23:52 imgs
  : -rw-rw-r--. 1 wagner wagner 3607 fev 11 00:09 LojaDeInformatica.org
  : drwxrwxr-x. 3 wagner wagner 4096 fev 10 23:53 PC2LojaDeInformatica

  deu pra ver o diretório " PC2LojaDeInformatica"?
  vamos ver o que tem dentro dele?
  #+NAME: ls proj
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica && ls -l
  #+END_SRC

  #+RESULTS: ls proj
  : total 0
  
  por enquanto nada.. entra dentro do diretório do projeto e dê o
  seguinte comando pra criar um projeto do maven
  #+NAME: mvn create project
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica && mvn archetype:generate -DgroupId=br.edu.etec.lojainformatica -DartifactId=lojainformatica -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
  #+END_SRC

  #+RESULTS: mvn create project
  #+begin_example
  [INFO] Scanning for projects...
  [INFO] 
  [INFO] ------------------------------------------------------------------------
  [INFO] Building Maven Stub Project (No POM) 1
  [INFO] ------------------------------------------------------------------------
  [INFO] 
  [INFO] >>> maven-archetype-plugin:3.0.1:generate (default-cli) > generate-sources @ standalone-pom >>>
  [INFO] 
  [INFO] <<< maven-archetype-plugin:3.0.1:generate (default-cli) < generate-sources @ standalone-pom <<<
  [INFO] 
  [INFO] 
  [INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---
  [INFO] Generating project in Batch mode
  Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.pom
  Progress (1): 703 B                   Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.pom (703 B at 1.7 kB/s)
  Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.jar
  Progress (1): 2.1/4.3 kBProgress (1): 4.3 kB                        Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.jar (4.3 kB at 8.3 kB/s)
  [INFO] ----------------------------------------------------------------------------
  [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0
  [INFO] ----------------------------------------------------------------------------
  [INFO] Parameter: basedir, Value: /home/wagner/wagnerdocri@gmail.com2/envs/env-dev/sources/somewritings/Etec-ProgramacaoDeComputadoresII/PC2LojaDeInformatica
  [INFO] Parameter: package, Value: br.edu.etec.lojainformatica
  [INFO] Parameter: groupId, Value: br.edu.etec.lojainformatica
  [INFO] Parameter: artifactId, Value: lojainformatica
  [INFO] Parameter: packageName, Value: br.edu.etec.lojainformatica
  [INFO] Parameter: version, Value: 1.0-SNAPSHOT
  [INFO] project created from Old (1.x) Archetype in dir: /home/wagner/wagnerdocri@gmail.com2/envs/env-dev/sources/somewritings/Etec-ProgramacaoDeComputadoresII/PC2LojaDeInformatica/lojainformatica
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  [INFO] Total time: 7.756 s
  [INFO] Finished at: 2018-02-11T00:33:19-02:00
  [INFO] Final Memory: 15M/145M
  [INFO] ------------------------------------------------------------------------
  #+end_example

  Vamos ver a estrutura do projeto java que o maven criou?
  #+NAME: ls no projeto mvn
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica && ls -l
  #+END_SRC

  #+RESULTS: ls no projeto mvn
  : total 4
  : drwxrwxr-x. 3 wagner wagner 4096 fev 11 00:33 lojainformatica
  
  o maven criou a pasta que contém o projeto maven. 
  Então pare e pense só um pouquino....
  Temos uma pasta que representa o nosso repositório do github que no
  meu caso é a "cd ./PC2LojaDeInformatica" . A gente entrou dentro
  dele a criamos nosso projeto maven que por sua vez também criou uma
  pasta do projeto.
  Resumindo, podemos dizer que a pasta do nosso repositório tem a
  pasta do projeto.
  Mas o que tem dentro do projeto? Vamos ver...

  #+NAME: ls dentro do proj maven
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/lojainformatica && ls -l
  #+END_SRC

  #+RESULTS: ls dentro do proj maven
  : total 8
  : -rw-rw-r--. 1 wagner wagner  670 fev 11 00:33 pom.xml
  : drwxrwxr-x. 4 wagner wagner 4096 fev 11 00:33 src
 
  Tem um arquivo pom.xml e uma pasta src. tem outras pastas mas eu
  mostro pra vcs em sala de aula... por enquanto vc tem que saber é
  que esse pom é arquivo onde a gente configura nosso projeto
  java. Por enquanto não precisa configurar nada, mas depois a gente
  vai fazer isso.

  acho que vale muito a pena agora vc ler
  http://blog.caelum.com.br/processo-de-build-com-o-maven/

* usando o git pra ver as alteracoes no respositorio
  Bom, depois que a gente clonou nosso repositório, entramos dentro
  dele e criamos o nosso projeto do maven. Obviamente o nosso
  repositório teve alterações. A vantagem de utilizar esse repositório
  é que o que a gente fizer dentro dele a gente pode subir tudo pro
  github e ainda tem muitas outras vantagens que não pra escrever tudo
  aqui.
  Por agora queremos ver o que mudou no nosso repositório e também
  queremos subir pro github.
  Então, vendo o que mudou... é sinomimo de conhecer o status da nossa
  cópia local do repositório ...
  Lembrando que esse comando vc tem que dar dentro do diretório do seu respositório.
  #+NAME: git status1
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git status
  #+END_SRC

  #+RESULTS: git status1
  #+begin_example
  On branch master

  Initial commit

  Untracked files:
    (use "git add <file>..." to include in what will be committed)

          lojainformatica/

  nothing added to commit but untracked files present (use "git add" to track)
  #+end_example
  
  O git tá te dizendo que o diretório do projeto é "untracked". Pense
  nisso como "fora dos trilhos", ou seja, fora de controle. 
  Fora de controle porque o git não tá controlando isso ainda, mas a
  gente quer que ele econtrole obviamente, então vamos dar um git add
  pra isso...
  
#+NAME: git add lojainformatica
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git add lojainformatica/
  #+END_SRC

  #+RESULTS: git add lojainformatica

Vamos ver se adicionou?

#+NAME: git status 2
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git status
  #+END_SRC

  #+RESULTS: git status 2
  #+begin_example
  On branch master

  Initial commit

  Changes to be committed:
    (use "git rm --cached <file>..." to unstage)

          new file:   lojainformatica/pom.xml
          new file:   lojainformatica/src/main/java/br/edu/etec/lojainformatica/App.java
          new file:   lojainformatica/src/test/java/br/edu/etec/lojainformatica/AppTest.java

  #+end_example

Adicionou sim... :) 
O git tá dizendo que há novos arquivos que ele está controlando, o que
significa que esses novos arquivos são as primeiras mudanças no nosso
repositório.

Agora a gente tem que commitar que é, grosseiramente dizendo, salvar
essas mudanças no repositório local pra que possam ser subidas no
github. Vamos commitar então...

#+NAME: git  commit1
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git commit -am "meu primeiro commit (legal!!!)"
  #+END_SRC

  #+RESULTS: git  commit1
  : [master (root-commit) 4eb0c7d] meu primeiro commit (legal!!!)
  :  3 files changed, 69 insertions(+)
  :  create mode 100644 lojainformatica/pom.xml
  :  create mode 100644 lojainformatica/src/main/java/br/edu/etec/lojainformatica/App.java
  :  create mode 100644 lojainformatica/src/test/java/br/edu/etec/lojainformatica/AppTest.java

  Apos o commit um git status vai te mostrar que não tem mais nenhuma
  alteração no seu repositório que ainda tenha que ser salva.

#+NAME: git status pos commit1
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git status
  #+END_SRC

  #+RESULTS: git status pos commit1
  : On branch master
  : Your branch is based on 'origin/master', but the upstream is gone.
  :   (use "git branch --unset-upstream" to fixup)
  : nothing to commit, working tree clean

* Exercício de criar, ou alterar, arquivo README.md
Beleza, agora, se o seu projeto já tem o arquivo README.md, altere ele
explicando do que se trata seu projeto. Depois será necessário apenas
commitar.
Mas se o seu respositório ainda não tiver um arquivo READEME.md, crie
um com o notepad++ mesmo. Só que aí vc tem que dar um git add , depois
um git commit.
Peça ajuda pro seu professor, mas tente fazer primeiro segundo o fluxo
de trabalho que estudamos até aqui.

* dando gitpush pra enviar o proj pro github
#+NAME: git push1
  #+BEGIN_SRC sh :results output
  cd ./PC2LojaDeInformatica/ && git push
  #+END_SRC

#+BEGIN_EXAMPLE
[wagner@Unknown PC2LojaDeInformatica]$ git push
Counting objects: 22, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (22/22), 1.97 KiB | 126.00 KiB/s, done.
Total 22 (delta 0), reused 0 (delta 0)
To https://github.com/wagnermarques/PC2LojaDeInformatica.git
 * [new branch]      master -> master
[wagner@Unknown PC2LojaDeInformatica]$ 
#+END_EXAMPLE
Esse é o resultado do meu push.
Agora é so ir na página do seu projeto no github pra ver o seu projeto
lá...

[[file:./imgs/proj-loja-info-no-github-commit-primeiro.png]]
Veja que os arquivos do projeto estão lá também. Compare com os
arquivos do projeto da sua máquina.
[[file:./imgs/proj-loja-info-no-github-commit-primeiro2.png]]


* agora vamos programar um pouco
** abra seu eclipse e importe o projeto
[[file:./imgs/eclipse-import-maven-project1.png]]

file:./imgs/eclipse-import-maven-project2.png

file:./imgs/eclipse-import-maven-project3.png

file:./imgs/eclipse-import-maven-project4.png

file:./imgs/eclipse-import-maven-project5.png

file:./imgs/eclipse-import-maven-project6.png

** vamos criar uma primeira tela swing pra nossa aplicacao

[[file:./imgs/eclipse-2-codigo-tela1.png]]

file:./imgs/eclipse-2-rodando-o-projeto1.png

file:./imgs/eclipse-2-codigo-tela1-executando.png

** criando telas de formularios para cadastrar cliente, hardware
   
Como vamos fazer pelo menos tres telas, o que for comum entre elas a
gente usa uma classe abstrata pra economizar codigo...

[[file:././PC2LojaDeInformatica/lojainformatica/src/main/java/br/edu/etec/lojainformatica/TelaDeCadastro.java]]

#+INCLUDE: "./PC2LojaDeInformatica/lojainformatica/src/main/java/br/edu/etec/lojainformatica/TelaDeCadastro.java" :only-contents t :src java




